/**
 * Licensed to Universite de Rouen under one or more contributor license
 * agreements. See the NOTICE file distributed with this work for
 * additional information regarding copyright ownership.
 *
 * Universite de Rouen licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fr.normandieuniv.cemnws.db;

import fr.normandieuniv.cemnws.db.CemnEtu;
import java.math.BigDecimal;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CemnEtu_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager CemnEtu.entityManager;
    
    public static final EntityManager CemnEtu.entityManager() {
        EntityManager em = new CemnEtu().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long CemnEtu.countCemnEtus() {
        return entityManager().createQuery("SELECT COUNT(o) FROM CemnEtu o", Long.class).getSingleResult();
    }
    
    public static List<CemnEtu> CemnEtu.findAllCemnEtus() {
        return entityManager().createQuery("SELECT o FROM CemnEtu o", CemnEtu.class).getResultList();
    }
    
    public static CemnEtu CemnEtu.findCemnEtu(BigDecimal codEtu) {
        if (codEtu == null) return null;
        return entityManager().find(CemnEtu.class, codEtu);
    }
    
    public static List<CemnEtu> CemnEtu.findCemnEtuEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM CemnEtu o", CemnEtu.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void CemnEtu.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void CemnEtu.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            CemnEtu attached = CemnEtu.findCemnEtu(this.codEtu);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void CemnEtu.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void CemnEtu.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public CemnEtu CemnEtu.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        CemnEtu merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
